const express = require('express')

const path = require('path')

const {open} = require('sqlite')

const sqlite3 = require('sqlite3')
const format = require('date-fns/format')

const isMatch = require('date-fns/isMatch')

const isValid = require('date-fns/isValid')
const app = express()

app.use(express.json())

let database

const initializeDbAndServer = async () => {
  try {
    database = await open({
      filename: path.join(__dirname, 'todoApplication.db'),
      driver: sqlite3.Database,
    })
    app.listen(3000, () => {
      console.log('Server is Running on http://localhost:3000/')
    })
  } catch (error) {
    console.log(`DB Error: ${error.message}`)
    process.exit(1)
  }
}

initializeDbAndServer()

const checkRequestQueries = async (request, response, next) => {
  const {search_q, category, priority, status, data} = request.query
  const {todoId} = request.params
  if (category !== undefined) {
    const categoryArray = ['WORK', 'HOME', 'LEARINING']
    const categoryISInArray = categoryArray.includes(category)
    if (categoryISInArray === true) {
      request.category = category
    } else {
      response.status(400)
      response.send('Invalid Todo Category')
      return
    }
  }
  if (priority !== undefined) {
    const priorityArray = ['HIGH', 'MEDIUM', 'LOW']
    const priorityIsInArray = priorityArray.includes(priority)

    if (priorityIsInArray === true) {
      request.priority = priority
    } else {
      response.status(400)
      response.send('Invalid Todo Priority')
      return
    }
  }
  if (status !== undefined) {
    const statusArray = ['TO DO', 'IN PROGRESS', 'DONE']
    const statusIsInArray = statusArray.includes(status)
    if (statusIsInArray === true) {
      request.status = status
    } else {
      response.status(400)
      response.send('Invalid Todo Status')
    }
  }
  if (date !== undefined) {
    try {
      const myDate = new Date(date)
      const formateDate = format(new Date(date), 'yyyy-MM-dd')
      console.log(formateDate, 'f')
      const result = toDate(
        new Date(
          `${myDate.getFullYear()}-${
            myDate.getMonth() + 1
          }-${myDate.getDate()}`,
        ),
      )
      console.log(result, 'r')
      console.log(new Date(), 'new')
      const isValidDate = await isValid(result)
      console.log(isValidDate, 'V')

      if (isValidDate === true) {
        request.date = formatedDate
      } else {
        response.status(400)
        response.send('Invalid Todo Due Date')
        return
      }
    } catch (e) {
      response.status(400)
      response.send('Invalid Due Date')
      return
    }
  }
  request.todoId = todoId
  request.search_q = search_q
  next()
}

const checkRequestBody = (request, response, next) => {
  const {id, todo, category, priority, status, dueDate} = request.body
  const {todoId} = request.params
  if (category !== undefined) {
    categoryArray = ['WORK', 'HOME', 'LEARNING']
    categoryISInArray = categoryArray.includes(category)
    if (categoryISInArray === true) {
      request.category = category
    } else {
      response.status(400)
      response.send('Invalid Todo Category')
      return
    }
  }
  if (priority !== undefined) {
    priorityArray = ['HIGH', 'MEDIUM', 'LOW']
    priorityIsInArray = priorityArray.includes(priority)
    if (priorityIsInArray === true) {
      request.priority = priority
    } else {
      response.status(400)
      response.send('Invalid Todo Priority')
      return
    }
  }
  if (status !== undefined) {
    statusArray = ['TO DO', 'IN PROGRESS', 'DONE']
    statusIsInArray = statusArray.includes(status)
    if (statusIsInArray === true) {
      request.status = status
    } else {
      response.status(400)
      response.send('Invalid Todo Status')
      return
    }
  }
  if (dueDate !== undefined) {
    try {
      const myDate = new Date(dueDate)
      const formatedDate = format(new Date(dueDate), 'yyyy-MM-dd')
      console.log(formatedDate)
      const result = toDate(new Date(formatedDate))
      const isValidDate = isValid(result)
      console.log(isValidDate)
      console.log(isValidDate)
      if (isValidDate === true) {
        request.dueDate = formatedDate
      } else {
        response.status(400)
        response.send('Invlaid Due Date')
        return
      }
    } catch (e) {
      response.status(400)
      response.send('Invalid Due Date')
    }
  }
  request.todo = todo
  request.id = id
  request.todoId = todoId

  next()
}

//API 1
app.get('/todos/', checkRequestQueries, async (request, response) => {
  const {status = '', search_q = '', priority = '', category = ''} = request
  console.log(status, search_q, priority, category)
  const getTodoQuery = `SELECT 
        id,
        todo,
        priority,
        status,
        category,
        due_date AS dueDate
        
    FROM 
        todo
    WHERE 
        todo LIKE '%${search_q}%' AND priority LIKE '%${priority}% AND status LIKE '%${status}% AND category LIKE '%${category}%;`
  const todoArray = await database.all(getTodoQuery)
  response.send(todoArray)
})

//API 2
app.get('/todos/:todoId/', checkRequestQueries, async (request, response) => {
  const {todoId} = request
  const getTodoQuery = `SELECT 
        id,
        todo,
        priority,
        status,
        category,
        due_date AS dueDate
        
    FROM 
        todo
    WHERE
        id = ${todoId};`

  const todo = await database.get(getTodoQuery)
  response.send(todo)
})

//API 3
app.get('/agenda/', checkRequestQueries, async (request, response) => {
  const {date} = request
  console.log(date, 'a')
  const selectDueDateQuery = `SELECT 
        id,
        todo,
        priority,
        status,
        category,
        due_date AS dueDate
        
    FROM 
        todo
    WHERE 
        due_date = '${date}';`
  const todosArray = await database.all(selectDueDateQuery)

  if (todosArray === undefined) {
    response.status(400)
    response.send('Invalid Due Date')
  } else {
    response.send(todosArray)
  }
})

//API 4
app.post('/todos/', checkRequestQueries, async (request, response) => {
  const {id, todo, category, priority, status, dueDate} = request
  const addTodoQuery = `
        INSERT INTO todo (id, todo, priority, status, category,  due_date)
        VALUES (
            ${id},
            '${todo}',
            '${priority}',
            '${status}',
            '${category}',
            '${dueDate}'
        );`

  const createUser = await database.run(addTodoQuery)
  console.log(createUser)
  response.send('Todo Successfully Added')
})

//API 5
app.put('/todos/:todoId/', checkRequestBody, async (request, response) => {
  const {todoId} = request
  const {priority, todo, status, category, dueDate} = request
  let updateTodoQuery = null
  console.log(priority, todo, status, dueDate, category)

  switch (true) {
    case status !== undefined:
      updateTodoQuery = `UPADATE todo SET status = '${status}' WHERE id = ${todoId};`
      await database.run(updateTodoQuery)
      response.send('Status Updated')
      break

    case priority !== undefined:
      updateTodoQuery = `UPADATE todo SET priority = '${priority}' WHERE id = ${todoId};`
      await database.run(updateTodoQuery)
      response.send('Priority Updated')
      break

    case todo !== undefined:
      updateTodoQuery = `UPADATE todo SET todo = '${todo}' WHERE id = ${todoId};`
      await database.run(updateTodoQuery)
      response.send('Todo Updated')
      break

    case category !== undefined:
      const updateCategoryQuery = `UPADATE todo SET category = '${category}' WHERE id = ${todoId};`
      await database.run(updateCategoryQuery)
      response.send('Category Updated')
      break

    case dueDate !== undefined:
      const updateDateQuery = `UPADATE todo SET due-date = '${dueDate}' WHERE id = ${todoId};`
      await database.run(updateDateQuery)
      response.send('Due Date Updated')
      break
  }
})

//API 6
app.delete('/todos/:todoId/', async (request, response) => {
  const {todoId} = request.params
  const deleteTodoQuery = `DELETE FROM todo WHERE id = ${todoId}`
  await database.run(deleteTodoQuery)
  response.send('Todo Deleted')
})

module.exports = app